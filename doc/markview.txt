*markview.nvim*                  An experimental markdown previewer for Neovim

╭─╼ Nvim ╾────────────────────────────┬───────────────────────────       ─╮
│ # markview.nvim                     │  markview.nvim                      │
│                                     │                                      │
│ A highly customisable "markdown"    │ A highly customisable 𝒎𝒂𝒓𝒌𝒅𝒐𝒘𝒏       │
│ previewer for Neovim.               │ previewer for Neovim.                │
│                                     │                                      │
│ Supported languages,                │ Supported languages                  │
│   - Markdown                        │     ◈ Markdown                       │
│   - HTML                            │     ◈ HTML                           │
│   - LaTeX                           │     ◈ LaTeX                          │
│   - Typst                           ├──────────────────────────────────────┤
│   - Yaml & Toml                     │  Inline LaTeX preview               │
│                                     │                               LaTeX │
│ Supports a wide variety of syntax!  │ Γ Δ Θ Λ Ξ Π Σ Ɛ Υ Φ Ψ Ω A B Δ μ χ ϱ  │
│ Also, fully customisable!           │ 𝛂 𝛃 𝛄 𝛅 𝛙 𝛇 𝛈 𝛘 𝛕                    │
│                                     │                                      │
│ ## Installation                     │ Inline math: (𝑎+𝑏)² = 𝑎² + 2𝑎𝑏 + 𝑏². │
│                                     │                                      │
│ ```lua                              │ $$                                   │
│ {                                   │ \mathsfbfit{Hello, Neovim▎           │
╰─────────────────────────────────────┴──────────────────────────────────────╯

==============================================================================
Overview                                              *markview.nvim-overview*

A powerful markdown, typst, latex, HTML(inline), YAML renderer for *nvim*.

------------------------------------------------------------------------------
Features                        *markview.nvim-features* *markview.nvim-feats*

Markdown ~

    • Supports a ton of markdown syntax such as,
        • Block quotes(+ callouts/alerts).
        • Code blocks.
        • Checkboxes(+ custom states).
        • Escaped characters.
        • Headings(atx & setext).
        • Horizontal rules.
        • Entities(entity number & entity name).
        • Inline codes.
        • List items,
            • Minus(-) list items.
            • Plus(+) list items.
            • Star(*) list items.
            • Dot(1.) list items.
            • Parenthesis[1)] list items.
        • Links,
            • Block references¹.
            • Emails.
            • Embed files¹.
            • Hyperlinks.
            • Image links.
            • Internal links¹.
            • Uri autolinks.
        • Metadata(yaml & toml).
        • Tables.
    • Stylized code blocks(with icons!).
    • Auto resized table renders.
    • Indented list items.
    • Custom horizontal rules.

¹ => From Obsidian.

Typst ~

    • Supports various typst syntax such as,
        • Escaped characters.
        • Embedded codes.
        • Headings.
        • Labels.
        • Links.
        • List items(-, +, n.).
        • Math sections.
        • Raw spans.
        • Raw blocks.
        • References.
        • Terminologies.
    • Stylized codes, math sections & raw blocks.
    • Inline & block rendering of math sections.
    • Indented & auto numbered list items(supports custom text formats too).

LaTeX ~

    • Supports various LaTeX math syntaxes such as,
        • Block maths.
        • Inline maths.
        • Math fonts.
        • Math symbols.
        • Parenthesis({,}).
        • Subscripts & Superscripts.
        • Text blocks.
        • Commands(e.g. frac & allows user defined ones too!).
    • Inline & block rendering of maths.
    • Font rendering.
    • Wide variety of symbols support.
    • Custom operator rendering support.

HTML ~

    • HTML tag name based preview.

YAML ~

    • Property name based icon preview.

Previewing ~

    • Hybrid mode for editing & previewing together.
    • Split view for previewing in a separate window.
    • Ability to only conceal specific preview types.
    • Various callbacks and autocmd events to use.
    • Full & partial rendering of buffer based on line count.

Others ~

    • Ability to configure at any time!
    • Extra modules,
        • checkbox.lua,
          Checkbox state changer & toggle.
        • editor.lua,
          Code block creator and editor.
        • headings.lua
          Heading level changer.
        • lsp_hover.lua
          Custom LSP hover via `markview.nvim`.

------------------------------------------------------------------------------
Requirements                                      *markview.nvim-requirements*

    • Neovim >= 0.10.1
    • Nerd font.
    • Tree-sitter parsers,
        • markdown.
        • markdown_inline.
        • html².
        • latex².
        • yaml².
        • typst².
    • Tree-sitter supported colorscheme.

² => Optional requirement.

------------------------------------------------------------------------------
Installation                                           *markview.nvim-install*

💤 Lazy.nvim ~
>lua
    {
        "OXY2DEV/markview.nvim",
        lazy = false,

        dependencies = {
            --- In case you installed the parsers via
            --- `nvim-treesitter` and are lazy loading.
            "nvim-treesitter/nvim-treesitter",

            --- Icon provider(for code blocks)
            --- "nvim-tree/nvim-web-devicons"
            --- "echasnovski/mini.icons"
        }
    }
<
🦠 Mini.deps ~
>lua
    local MiniDeps = require("mini.deps");

    MiniDeps.add({
        source = "OXY2DEV/markview.nvim",

        depends = {
            "nvim-treesitter/nvim-treesitter",

            --- Icon provider(for code blocks)
            --- "nvim-tree/nvim-web-devicons"
            --- "echasnovski/mini.icons"
        }
    });
<
🌒 Rocks.nvim ~
>vim
    :Rocks install markview.nvim
<
📦 Vim plug ~
>lua
    Plug "OXY2DEV/markview.nvim"
<
------------------------------------------------------------------------------
Configuration             *markview.nvim-configuration* *markview.nvim-config*

▌ 📝 Note
▌ As `markview.nvim` focuses on customisation, there are many options as such
▌ these options are grouped based on what they do.
>txt
               ├──────╸level 1╺───────╂──────╸level 2╺──────╂───╸level 3╺───┤
    markview ────┬─ highlight groups
                 ┆
                 ├─ experimental
                 ├─ preview                                  ╭─ enable
                 ├─ renderers                                ├─ default
                 ┆                      ╭─ block_quotes ─────┴─ callouts
                 ├─ html                ├─ code_blocks
                 ├─ latex               ├─ headings
                 ├─ markdown ───────────┼─ horizontal rules
                 ├─ markdown_inline     ├─ list_items
                 ├─ typst               ├─ metadata_minus
                 ╰─ yaml                ├─ metadata_plus
                                        ╰─ tables
<
Basic configuration table,
>lua
    {
        --- Highlight group customisation.
        ---@type { [string]: table }
        highlight_groups = {},

        --- Experimental options.
        ---@type markview.config.experimental
        experimental = {},
        --- Preview configuration.
        ---@type markview.config.preview
        preview = {},
        --- Custom renderers.
        ---@type markview.renderer.custom
        renderers = {},

        --- Language specific preview options.

        ---@type markview.config.html
        html = {},
        ---@type markview.config.latex
        latex = {},
        ---@type markview.config.markdown
        markdown = {},
        ---@type markview.config.markdown_inline
        markdown_inline = {},
        ---@type markview.config.typst
        typst = {},
        ---@type markview.config.yaml
        yaml = {}
    }
<
==============================================================================
Highlight groups                                            *markview.nvim-hl*
                                              *markview.nvim-highlight_groups*

The plugin comes with these highlight groups,

 Highlight group                        Option name ~
 -------------------------------------- ------------------------------------
 $MarkviewBlockQuoteDefault$              BlockQuoteDefault
 $MarkviewBlockQuoteError$                BlockQuoteError
 $MarkviewBlockQuoteNote$                 BlockQuoteNote
 $MarkviewBlockQuoteOk$                   BlockQuoteOk
 $MarkviewBlockQuoteSpecial$              BlockQuoteSpecial
 $MarkviewBlockQuoteWarn$                 BlockQuoteWarn

 $MarkviewCheckboxCancelled$              CheckboxCancelled
 $MarkviewCheckboxChecked$                CheckboxChecked
 $MarkviewCheckboxPending$                CheckboxPending
 $MarkviewCheckboxProgress$               CheckboxProgress
 $MarkviewCheckboxStriked$                CheckboxStriked
 $MarkviewCheckboxUnchecked$              CheckboxUnchecked

 $MarkviewCode$                           Code
 $MarkviewCodeFg$                         CodeFg
 $MarkviewCodeInfo$                       CodeInfo

 $MarkviewIcon1$                          Icon1
 $MarkviewIcon1Fg$                        Icon1Fg
 $MarkviewIcon1Sign$                      Icon1Sign
 $MarkviewIcon2$                          Icon2
 $MarkviewIcon2Fg$                        Icon2Fg
 $MarkviewIcon2Sign$                      Icon2Sign
 $MarkviewIcon3$                          Icon3
 $MarkviewIcon3Fg$                        Icon3Fg
 $MarkviewIcon3Sign$                      Icon3Sign
 $MarkviewIcon4$                          Icon4
 $MarkviewIcon4Fg$                        Icon4Fg
 $MarkviewIcon4Sign$                      Icon4Sign
 $MarkviewIcon5$                          Icon5
 $MarkviewIcon5Fg$                        Icon5Fg
 $MarkviewIcon5Sign$                      Icon5Sign
 $MarkviewIcon6$                          Icon6
 $MarkviewIcon6Fg$                        Icon6Fg
 $MarkviewIcon6Sign$                      Icon6Sign

 $MarkviewHeading1$                       Heading1
 $MarkviewHeading1Sign$                   Heading1Sign
 $MarkviewHeading2$                       Heading2
 $MarkviewHeading2Sign$                   Heading2Sign
 $MarkviewHeading3$                       Heading3
 $MarkviewHeading3Sign$                   Heading3Sign
 $MarkviewHeading4$                       Heading4
 $MarkviewHeading4Sign$                   Heading4Sign
 $MarkviewHeading5$                       Heading5
 $MarkviewHeading5Sign$                   Heading5Sign
 $MarkviewHeading6$                       Heading6
 $MarkviewHeading6Sign$                   Heading6Sign

 $MarkviewGradient1$                      Gradient1
 $MarkviewGradient2$                      Gradient2
 $MarkviewGradient3$                      Gradient3
 $MarkviewGradient4$                      Gradient4
 $MarkviewGradient5$                      Gradient5
 $MarkviewGradient6$                      Gradient6
 $MarkviewGradient7$                      Gradient7
 $MarkviewGradient8$                      Gradient8
 $MarkviewGradient9$                      Gradient9

 $MarkviewEmail$                          Email
 $MarkviewHyperlink$                      Hyperlink
 $MarkviewImage$                          Image

 $MarkviewLatexSubscript$                 LatexSubscript
 $MarkviewLatexSuperscript$               LatexSuperscript

 $MarkviewListItemMinus$                  ListItemMinus
 $MarkviewListItemPlus$                   ListItemPlus
 $MarkviewListItemStar$                   ListItemStar

 $MarkviewTableHeader$                    TableHeader
 $MarkviewTableBorder$                    TableBorder
 $MarkviewTableAlignLeft$                 TableAlignLeft
 $MarkviewTableAlignCenter$               TableAlignCenter
 $MarkviewTableAlignRight$                TableAlignRight

Fg   => Used for the window border for code block editor.
Sign => Used for the sign column(uses $LineNr$ for the background).

------------------------------------------------------------------------------
Modifying highlight groups                  *markview.nvim-o-highlight_groups*

Highlight groups can be either modified via normal method(s).
>lua
    vim.api.nvim_set_hl(0, "MarkviewHeading1", {
        fg = "#1E1E2E", bg = "#CDD6F4"
    });
<
Or via the configuration table.
>lua
    require("markview").setup({
        highlight_groups = {
            --- In this case adding `Markview` before the name
            --- is optional.
            ["Heading1"] = {
                fg = "#1E1E2E", bg = "#CDD6F4"
            }
        }
    });
<
------------------------------------------------------------------------------

There are a few ways to set highlight groups via the configuration table.
>lua
    --- As literal values
    ["Hyperlinks"] = {
        default = true,
        link = "@markup.link.label.markdown_inline"
    },

    --- Function based/dynamic values
    ["Code"] = function ()
        return {
            bg = vim.o.background == "dark" and "#313244" or "#CCD0DA"
        };
    end,

    --- Group of highlight groups
    ["Gradient"] = function ()
        return {
            {
                --- Note: In this case you MUST add "Markview"
                --- before the highlight groups name.
                ---
                --- This is intentional.
                group_name = "MarkviewGradient1",
                value = { fg = "#1E1E2E" }
            },
            {
                group_name = "MarkviewGradient2",
                value = { fg = "#2B3047" }
            },
        };
    end
<
▌Note:
▌These group names are first sorted(via `table.sort()`) and they applied.
▌This means that you can use a value from a previously applied group.

------------------------------------------------------------------------------
Helper functions                                    *markview.nvim-hl-helpers*

There are a few Helper functions to make the process of creating dynamic
highlight easier such as,

highlights.create({hls})                            *markview.nvim-hls.create*
                                             *markview.nvim-highlights.create*

    Creates highlight groups from the provided table.

    Parameters: ~
        • {hls} Table where the key is the highlight group's name & the value
          is the value of the highlight group.

    Usage: ~
    >lua
        highlights.create({
            --- As literal values
            ["Hyperlinks"] = {
                default = true,
                link = "@markup.link.label.markdown_inline"
            },

            --- Function based/dynamic values
            ["Code"] = function ()
                return {
                    bg = vim.o.background == "dark" and "#313244" or "#CCD0DA"
                };
            end,

            --- Group of highlight groups
            ["Gradient"] = function ()
                return {
                    {
                        --- Note: In this case you MUST add "Markview"
                        --- before the highlight groups name.
                        ---
                        --- This is intentional.
                        group_name = "MarkviewGradient1",
                        value = { fg = "#1E1E2E" }
                    },
                    {
                        group_name = "MarkviewGradient2",
                        value = { fg = "#2B3047" }
                    },
                };
            end
        });
<
highlights.mix({c_1}, {c_2}, {per_1}, {per_2})
                                                       *markview.nvim-hls.mix*
                                                *markview.nvim-highlights.mix*

    Mixes 2 color values based on the percentage.

    Parameters: ~
        • {c_1}   A list containing the color(in RGB or HSL or XYZ or LAB).
        • {c_2}   Same as {c_1}.
        • {per_1} The % of {c_1} to use. 0 <= {per_1} <= 1.
        • {per_2} The % of {c_2} to use.

    Return: ~
        {r/h/x/l, g/s/y/a, b/l/z/b} List containing the 3 channels.

    Usage: ~
    >lua
        highlights.mix(
            { 30, 34, 40 }
            { 205, 214, 244 },
            0.25,
            0.50
        );
<
highlights.get_property({property}, {groups}, {light}, {dark})
                                              *markview.nvim-hls.get_property*
                                       *markview.nvim-highlights.get_property*

    A wrapper for `nvim_get_hl()` that gets a property from a list of
    highlight groups.

    Mainly used when a group may not exist and fallback group(s) are used
    instead. Can also return a default value based on the 'background'.

    Parameters: ~
        • {property} Property to get. See `nvim_set_hl()`.
        • {groups}   List of highlight groups to check into.
        • {light}    Fallback value when 'background' is "light".
        • {dark}     Fallback value when 'background' is "dark".

    Return: ~
        {value}    The value of the property.

                   Note: If {property} is "fg", "bg" or "sp" then the
                         value will be a list containing the RGB values
                         instead of the integer value.

    Usage: ~
    >lua
        highlights.get_property(
            "fg",
            { "LineNr", "Normal" },
            "#1E1E2E",
            "#CDD6F4"
        );
<
highlights.hex({rgb})
                                                       *markview.nvim-hls.hex*
                                                *markview.nvim-highlights.hex*

    Turns RGB value into hex color code.

    Parameters: ~
        • {rgb} List containing the r, g, b channels. The values are between
                0 & 255.

    Return: ~
        {string} Hex color value.

    Usags: ~
    >lua
        highlights.hex({ 30, 34, 40 });
<
highlights.lab2rgb({lab})
                                                   *markview.nvim-hls.lab2rgb*
                                            *markview.nvim-highlights.lab2rgb*
    Turns RGB to LAB.

    Parameters: ~
        • {lab} List containing the l, a, b channels.

    Return: ~
        {r, g, b} RGB color value.

    Usage: ~
    >lua
        highlights.lab2rgb({ 11, 4, -10 });
<
highlights.lumen({rgb})
                                                     *markview.nvim-hls.lumen*
                                              *markview.nvim-highlights.lumen*

    Gets the luminosity of the RGB value.

    Parameters: ~
        • {rgb}, List containing r, g, b channels. Values are between 0 & 255.

    Return: ~
        {number} The luminosity. The value is between 0 & 1.

    Usage: ~
    >lua
        highlights.lumen({ 30, 34, 44 })
<

highlights.rgb({color})
                                                       *markview.nvim-hls.rgb*
                                                *markview.nvim-highlights.rgb*

    Gets the RGB value from a {color}.

    Parameters: ~
        • {color} A string, number or list.
            • {string}, If string and the color is a name(e.g. red, nvimgrey)
              then the RGB value of that color is returned.
            • {string}, If string and is a hexadecimal number than it's
              computed RGB value is returned.
            • {number}, If number then it's turned into a hexadecimal value
              and the resulting RGB value is returned.
            • {list},   If list then it's used as an HSL value and it's
              computed RGB value is returned.
              Note: The values should be between 0 & 1;

    Return: ~
        {r, g, b} RGB color value.

    Usage: ~
    >lua
        highlights.rgb("red");
        highlights.rgb("#1E1E2E");
        highlights.rgb(1973806);
        highlights.rgb({ 226, 64, 88 });
<
highlights.rgb2hsl({rgb})
                                                   *markview.nvim-hls.rgb2hsl*
                                            *markview.nvim-highlights.rgb2hsl*

    Turns RGB to HSL.

    Parameters: ~
        • {rgb} List containing r, g, b values.

    Return: ~
        {h, s, l} HSL color value.

        Warning: The values are between 0 & 1.

    Usage: ~
    >lua
        highlights.hsl({ 226, 64, 88 });
<
highlights.rgb2lab({rgb})
                                                   *markview.nvim-hls.rgb2lab*
                                            *markview.nvim-highlights.rgb2lab*
    Turns RGB to LAB.

    Parameters: ~
        • {rgb} List containing the r, g, b channels.

    Return: ~
        {l, a, b} RGB color value.

    Usage: ~
    >lua
        highlights.lab2rgb({ 30, 30, 46 });
<
==============================================================================
Experimental Options                            *markview.nvim-o-experimental*

Experimental options are meant for testing purposes as they can on some
occasions break other things.

                                            *markview.nvim-exp.file_byte_read*
                                   *markview.nvim-experimental.file_byte_read*
    • file_byte_read, {integer}
      Default: 1000

      Number of bytes to read from a file.

      Used by the internal link opener to determine whether to open the file
      inside Neovim or not.

      Note: Not used when filetypes are specified in the config.

                                          *markview.nvim-exp.nvim_open_method*
                                 *markview.nvim-experimental.nvim_open_method*
    • nvim_open_method, {string}
      Default: tab

      Changes how files are opened in Neovim. Possible values are,
        • edit, Opens using ":edit"
        • split, Opens using ":sp"
        • tab, Opens using ":tabnew"
        • vsplit, Opens using ":vsp"

                                 *markview.nvim-exp.list_empty_line_tolerance*
                        *markview.nvim-experimental.list_empty_line_tolerance*
    • list_empty_line_tolerance, {integer}
      Default: 3

      Amount of empty lines a list_item can have between it's lines. >txt
        - list items     ┐ ╭╸ Lines to include in the list item.
                         │ │
          A single line. │ │
                         │ │
                         │ ┘
                         │
          Another line.  ╰╸ Lines tree-sitter includes in the list item.
<
                                            *markview.nvim-exp.text_filetypes*
                                   *markview.nvim-experimental.text_filetypes*
    • text_filetypes, {list?}
      Default: nil

      Filetypes that should be opened inside Neovim.

==============================================================================
Preview Options                                     *markview.nvim-o-previews*

Preview options change how/where the plugin shows the preview. This is
different compared to language-specific options as they change how things are
parsed and what is shown(& not shown) in the preview.

                                   *markview.nvim-pre.enable_preview_on_start*
                               *markview.nvim-preview.enable_preview_on_start*
    • enable_preview_on_start, {boolean}
      Default: true

      When {true}, previews are enabled.

      When {false}, attached buffers do not show preview and commands has to
      be used to show the previews.

                                                 *markview.nvim-pre.callbacks*
                                             *markview.nvim-preview.callbacks*
    • callbacks, {table}

      Callback functions to run on specific scenarios.

        • on_attach, {function}

          Called when attaching to a buffer.

          Parameters: ~

            • {buf},  Buffer ID.
            • {wins}, List of attached windows.

        • on_detach, {function}

          Called when detaching from a buffer.

          Parameters: ~

            • {buf},  Buffer ID.
            • {wins}, List of attached windows.

        • on_enable, {function}

          Called when enabling preview on a buffer.

          Parameters: ~

            • {buf},  Buffer ID.
            • {wins}, List of attached windows.

        • on_disable, {function}

          Called when disabling preview on a buffer.

          Parameters: ~

            • {buf},  Buffer ID.
            • {wins}, List of attached windows.

        • on_mode_change, {function}

          Called when changing VIM modes. You can also use the `ModeChanged`
          autocmd.

          Parameters: ~

            • {buf},  Buffer ID.
            • {wins}, List of attached windows.
            • {mode}, VIM mode shorthand.

        • on_state_change, {function}

          Called when the plugins global state changes. Invoked by commands
          that end with 'All'.

          Parameters: ~

            • {bufs},  Buffer IDs for the attached buffers.
            • {state}, `true` when plugin is active, otherwise `false`.

        • splitview_enable, {function}

          Called when entering splitview mode.

          Parameters: ~

            • {sp_buf}, The buffer where the preview will be shown.
            • {sp_win}, The window where the preview will be shown.

        • splitview_disable, {function}

          Called when exiting splitview mode.

                                                  *markview.nvim-pre.debounce*
                                              *markview.nvim-preview.debounce*
    • debounce, {integer}
      Default: 25

      Time(in milliseconds) to wait before redrawing the preview. Can affect
      performance.

      Higher values are recommended on smaller buffers(& powerful machines).

                                             *markview.nvim-pre.edit_distance*
                                         *markview.nvim-preview.edit_distance*
    • edit_distance, {tuple}
      Default: { 0, 1 }

      Distance from the cursor that will be considered being edited. Nodes
      that are inside these ranges will mot be rendered on hybrid_mode.

      The first value is the number of lines above the cursor position, the
      second value is the number of lines below the cursor position.

                                              *markview.nvim-pre.hybrid_modes*
                                          *markview.nvim-preview.hybrid_modes*
    • hybrid_modes, {list}
      Default: {}

      VIM modes where hybrid mode is enabled. Modes short-names are used for
      this,
        • n → normal mode
        • v → visual mode
        • c → command mode

                                           *markview.nvim-pre.ignore_buftypes*
                                       *markview.nvim-preview.ignore_buftypes*
    • ignore_buftypes, {list},
      Default: { "nofile" }

      List of 'buftype''s to ignore.

                                       *markview.nvim-pre.ignore_node_classes*
                                   *markview.nvim-preview.ignore_node_classes*
    • ignore_node_classes, {table}
      Default: {}

      Node classes that aren't removed in hybrid mode even if they are inside
      `edit_distance`.

      Note:
      "Affected options" is the option name for that node inside it's language
      option.

      It can be configured for different languages,

        • latex, {list} ← `markview.nvim-latex`

          Node class                        Affected options
          --------------------------------- ------------------------
          commands                             commands
          fonts                                fonts
                                               texts
          injections                           blocks
                                               inlines
          parenthesis                          parenthesis
          styles                               subscripts
                                               superscripts
          symbols                              escapes
                                               symbols

        • markdown, {list} ← `markview.nvim-markdown`

          Node class                        Affected options
          --------------------------------- ------------------------
          block_quotes                      block_quotes
          code_blocks                       code_blocks
          headings                          headings
          list_items                        list_items
          metadatas                         metadata_minus
                                            metadata_plus
          tables                            tables

        • markdown_inline, {list} ← `markview.nvim-markdown_inline`

          Node class                        Affected options
          --------------------------------- ------------------------
          checkboxes                        checkboxes
          inline_codes                      inline_codes
          links                             emails
                                            images
                                            hyperlinks
                                            uri_autolinks
          obsidian                          internal_links
                                            embed_files
                                            block_references
          symbols                           escapes
                                            entities

        • typst, {list} ← `markview.nvim-typst`

          Node class                        Affected options
          --------------------------------- ------------------------
          headings                          headings
          injections                        raw_blocks
                                            raw_spans
          links                             reference_links
                                            url_links
          symbols                           terms

        • yaml, {list} ← `markview.nvim-yaml`

          Node class                        Affected options
          --------------------------------- ------------------------
          properties                        properties

                                           *markview.nvim-pre.max_file_length*
                                       *markview.nvim-preview.max_file_length*
    • max_file_length, {integer}
      Default: 1000

      Number of lines a file/buffer can have for the entire buffer to be
      previewed.

      If the length exceeds this value then only the nodes within
      `render_distance` will be previewed.

                                           *markview.nvim-pre.render_distance*
                                       *markview.nvim-preview.render_distance*
    • render_distance, {integer}
      Default: vim.o.lines

      Number of lines around the cursor to preview when the buffers line count
      is larger then `max_file_length`.

                                         *markview.nvim-pre.splitview_winopts*
                                     *markview.nvim-preview.splitview_winopts*
    • splitview_winopts, {table}
      Default: nil

      Window options(see `vim.api.nvim_open_win()`) for the preview window in
      splitview.

==============================================================================
Markdown options                                    *markview.nvim-o-markdown*

Changes the appearance of various markdown block elements.

                                               *markview.nvim-md.block_quotes*
                                         *markview.nvim-markdown.block_quotes*
    • block_quotes, {table}

      Changes how block quotes, callouts/alerts are shown.

        • enable, {boolean}
          Default: true

          Enables/Disables preview of this node.

        --------------------------------------------------------------

        • default, {table}
          Default: { hl = "MarkviewBlockQuoteDefault", border = "▋" }

          Changes how normal block quotes & unknown callouts/alerts are shown.

          Properties: ~

            • border, {string}
              Text used as the border.

            • hl, {string?}
              Highlight group for the border.

        • callouts, {list}
          Default: { ... }

          List of configuration tables for different type of callouts. Each
          configuration is a table.

          Properties: ~

          Each configuration table has the following properties,

            • match_string, {string}

              Callout identifier `[!...]` string. It is NOT case-sensitive.

            --------------------------------------------------------

            • preview, {string}

              Text to show as preview.

            • title, {boolean?}

              When `true`, the callout can use a custom title.

            • icon, {string?}

              Icon to show when custom titles are used.

            --------------------------------------------------------

            • hl, {string?}

              Default highlight group for the callout.

              Warning:
              This will be used by other properties that have `_hl` in their
              name.

            • preview_hl, {string?}

              Highlight group for preview.

            • icon_hl, {string?}

              Highlight group for icon.

            • border_hl, {string?}

              Highlight group for border.

          Example: ~
          >lua
            {
                match_string = "ABSTRACT",
                preview = "󱉫 Abstract",
                hl = "MarkviewBlockQuoteNote",

                title = true,
                icon = "󱉫",

                border = "▋"
            },
<
                                                *markview.nvim-md.code_blocks*
                                          *markview.nvim-markdown.code_blocks*
    • code_blocks, {table}

      Changes appearance of `fenced code blocks`.

        • enable, {boolean}
          Default: true

          Enables/Disables preview of this node.

        --------------------------------------------------------------

        • icons, {string}
          Default: "internal"

          Changes the icon provider for code blocks. Currently supported
          providers are,

            • "devicons", uses `nvim-tree/nvim-web-devicons`.
            • "mini", uses `echasnovski/mini.icons`.
            • "internal", uses the internal icon provider.

          Note:
          You can do `icons = ""` to disable icons!

        • language_direction, {left} or {right}
          Default: "left"

          Direction of the language name & icon.

        • language_names, {table}
          Default: {}

          Table where the keys are the `language string` and the values are
          the `preview string`.

          Example: ~
          >lua
          {
              ["cpp"] = "C++"
          }
<
        • min_width, {integer}, style: `block`
          Default: 60

          Minimum width of code block.

        • style, {simple} or {block}
          Default: "block"

          Changes how code blocks are rendered,

            • "simple",
              Highlights the lines of the code blocks.

            • "block",
              Creates a box around the code block.

              Note:
              This doesn't work with <tab> indentation. Use 'expandtab' for
              this and run `:retab` if you want to turn all the tabs into
              spaces.

        • sign, {boolean}
          Default: true

          When `true`, signs are shown.

        • pad_amount, {integer}, style: `block`
          Default: 3

          Amount of padding added around the text.

        • pad_char, {string?}
          Default: " "

          Character used for padding.

        --------------------------------------------------------------

        • hl, {string?}
          Default: "MarkviewCode"

          Default highlight group for the code block.

          Warning:
          This will be used by other properties that have `_hl` in their
          name.

        • info_hl, {string?}
          Default: "MarkCodeInfo"

          Highlight group for the info string.

        • language_hl, {string?}
          Default: nil

          Highlight group for the language string.

        • sign_hl, {string?}
          Default: nil

          Highlight group for the sign.

                                                   *markview.nvim-md.headings*
                                             *markview.nvim-markdown.headings*
    • headings, {table}

      Changes how headings are shown.

        • enable, {boolean}
          Default: true

          Enables/Disables preview of this node.

        --------------------------------------------------------------

        • heading_1, {table}

          Changes how level 1 atx heading is shown.

          Properties: ~

            • style, {simple}, {label} or {icon}
              Default; "icon"

              Preview style for the heading. Possible values,

                • "simple", Only highlights the line.
                • "label", `Glow`-like labels.
                • "icon", Adds icon to the heading.

            ------------------------------------------------------

            • align, {left}, {center} or {right}, style: `label`
              Default: nil

              Changes the alignment of label styled headings.

              Warning:
              This is affected by the window size. It doesn't update itself
              on window resize events.

            • corner_left, {string?}, style: `label`
              Default: nil

              Text used as the left corner of the label.

            • corner_right, {string?}, style: `label`
              Default: nil

              Text used as the right corner of the label.

            • padding_left, {string?}, style: `label`
              Default: nil

              Text used as the left padding of the label. Added after the
              left corner.

            • padding_right, {string?}, style: `label`
              Default: nil

              Text used as the right padding of the label. Added before the
              right corner.

            • icon, {string?}, style: `label`, `icon`
              Default: "󰼏  "

              Icon for the heading. It is added after the left padding if the
              style is `label` and is added before the heading text if the
              style is `icon`.

            • sign, {string?}
              Default: "󰌕 "

              Sign for the heading.

            ------------------------------------------------------

            • corner_left_hl, {string?}, style: `label`
              Default: nil

              Highlight group for the left corner of the label.

            • corner_right_hl, {string?}, style: `label`
              Default: nil

              Highlight group for the right corner of the label.

            • hl, {string?}
              Default: "MarkviewHeading1"

              Default highlight group for this heading.

              Warning:
              This will be used by other properties that have `_hl` in their
              name.

            • icon_hl, {string?}, style: `label`, `icon`
              Default: nil

              Highlight group for the icon.

            • padding_left_hl, {string?}, style: `label`
              Default: nil

              Highlight group for the left padding of the label.

            • padding_right_hl, {string?}, style: `label`
              Default: nil

              Highlight group for the right padding of the label.

            • sign_hl, {string?}
              Default: "MarkviewHeading1Sign"

              Highlight group for the sign.

          Example: ~
          >lua
            --- Simple style example
            heading_1 = {
                style = "simple",
                sign = "󰌕 ", sign_hl = "MarkviewHeading1Sign",

                hl = "MarkviewHeading1"
            },

            --- Label style example
            heading_1 = {
                style = "label",
                sign = "󰌕 ", sign_hl = "MarkviewHeading1Sign",

                padding_left = " ", padding_right = " ",
                icon = "󰼏  ", hl = "MarkviewHeading1",
            },

            --- Icon style example
            heading_1 = {
                style = "icon",
                sign = "󰌕 ", sign_hl = "MarkviewHeading1Sign",

                icon = "󰼏  ", hl = "MarkviewHeading1",
            }
<
        • heading_2, {table}

          Changes how level 2 atx heading is shown. See `heading_1`.

        • heading_3, {table}

          Changes how level 3 atx heading is shown. See `heading_1.`

        • heading_4, {table}

          Changes how level 4 atx heading is shown. See `heading_1`.

        • heading_5, {table}

          Changes how level 5 atx heading is shown. See `heading_1`.

        • heading_6, {table}

          Changes how level 6 atx heading is shown. See `heading_1`.

        --------------------------------------------------------------

        • setext_1, {table}

          Changes the appearance of level 1 setext headings.

          Properties: ~

            • style, {simple} or {decorated}
              Default: "decorated"

              Preview style for the setext headings. Possible values,

                • "simple", Highlights the heading lines.
                • "decorated", Adds decorations to the heading.

            ------------------------------------------------------

            • border, {string}, style: `decorated`
              Default: "▂"

              Text to use as the bottom border of the heading.

            • icon, {string}, style: `decorated`
              Default: "  "

              Icon for the heading.

            • sign, {string?}
              Default: "󰌕 "

              Sign for the heading.

            ------------------------------------------------------

            • border_hl, {string?}, style: `decorated`
              Default: nil

              Highlight group for the border.

            • hl, {string}
              Default: "MarkviewHeading1"

              Default highlight group for the heading.

              Warning:
              This will be used by other properties that have `_hl` in their
              name.

            • sign_hl, {string?}, style: `decorated`
              Default: "MarkviewHeading1Sign"

              Highlight group for the sign.

        • setext_2, {table}

          Changes how level 2 setext heading is shown. See `setext_1.`

                                           *markview.nvim-md.horizontal_rules*
                                     *markview.nvim-markdown.horizontal_rules*
    • horizontal_rules, {table}

      Changes how horizontal rules/line breaks are shown.

        • enable, {boolean}
          Default: true

          Enables/Disables preview of this node.

        --------------------------------------------------------------

        • parts, {list}
          Default: { ... }

          Parts to build the horizontal rule.

          Parts: ~

                                                 *markview.nvim-hrs.repeating*
                                    *markview.nvim-horizontal_rules.repeating*
            • repeating,

              Repeats the given text by the specified amount.

              Properties: ~

                • type, {repeating}

                  Part type name.

                ----------------------------------------------

                • direction, {left} or {right}

                  The direction from where highlights are applied.
                  >txt
                    ◀───────────── direction = "right"
                    Hello, Neovim.
                    ─────────────▶ direction = "left"
<
                • hl, {string} or {list}

                  Highlight group for the resulting text.

                  If it's a string then it's used as a `solid color`. But if
                  it's a list of strings then it's used as a `gradient`.

                • repeat_amount, {integer} or {function}

                  The number of times to repeat text.

                  Parameters: ~

                  If it's a function it receives the following parameters,

                    • {buf}, Buffer ID where it's being drawn.

                  Return: ~

                    • {integer}, Number of times to repeat the text.

                ----------------------------------------------

                • text, {string}

                  Text to repeat.

              Example: ~
              >lua
                {
                    type = "repeating",
                    repeat_amount = function (buffer) --[[@as function]]
                        local utils = require("markview.utils");
                        local window = utils.buf_getwin(buffer)

                        local width = vim.api.nvim_win_get_width(window)
                        local textoff = vim.fn.getwininfo(window)[1].textoff;

                        return math.floor((width - textoff - 3) / 2);
                    end,

                    text = "─",

                    direction = "left",
                    hl = {
                        "MarkviewGradient1", "MarkviewGradient1",
                        "MarkviewGradient2", "MarkviewGradient2",
                        "MarkviewGradient3", "MarkviewGradient3",
                        "MarkviewGradient4", "MarkviewGradient4",
                        "MarkviewGradient5", "MarkviewGradient5",
                        "MarkviewGradient6", "MarkviewGradient6",
                        "MarkviewGradient7", "MarkviewGradient7",
                        "MarkviewGradient8", "MarkviewGradient8",
                        "MarkviewGradient9", "MarkviewGradient9"
                    }
                },
<
                                                      *markview.nvim-hrs.text*
                                         *markview.nvim-horizontal_rules.text*
            • text,

              Shows some text literally.

              Properties: ~

                • type, {text}

                  Part type name.

                ----------------------------------------------

                • text, {string}

                  Text to show.

                • hl, {string?}

                  Highlight group for the text.

              Example: ~
              >lua
                {
                    type = "text",
                    text = "  ",
                    hl = "MarkviewIcon3Fg"
                }
<
                                                 *markview.nvim-md.list_items*
                                           *markview.nvim-markdown.list_items*
    • list_items, {table}

      Changes how list items are shown.

        • enable, {boolean}
          Default: true

          Enables/Disables preview of this node.

        --------------------------------------------------------------

        • indent_size, {integer}
          Default: 2

          Number of spaces between each level of list item.

        • shift_width, {integer}
          Default: 4

          Number of spaces between each level of previewed list item.

        --------------------------------------------------------------

        • marker_minus, {table}

          Changes how `-` list items are shown.

          Properties: ~

            • add_padding, {boolean}
              Default: true

              When `true`, list items are indented based on their level.

            • conceal_on_checkboxes, {boolean}
              Default: true

              When `true`, list items that contain checkboxes won't render
              their marker.

            • hl, {string?}
              Default: "MarkviewListItemMinus"

              Highlight group for the marker.

            • text, {string}
              Default: ""

              Text used as the marker.

        • marker_plus, {table}

          Changes how `+` list items are shown. See `marker_minus`.

        • marker_star, {table}

          Changes how `*` list items are shown. See `marker_minus`.

        --------------------------------------------------------------

        • marker_dot, {table}

          Changes how `n.` list items are shown.

          Parameters: ~

            • add_padding, {boolean}
              Default: true

              When `true`, list items are indented based on their level.

            • conceal_on_checkboxes, {boolean}
              Default: true

              When `true`, list items that contain checkboxes won't render
              their marker.

        • marker_parenthesis, {table}

          Changes how `n)` list items are shown. See `marker_dot`.

                                             *markview.nvim-md.metadata_minus*
                                       *markview.nvim-markdown.metadata_minus*
    • metadata_minus, {table}

      Changes how YAML metadata sections are shown.

        • enable, {boolean}
          Default: true

          Enables/Disables preview of this node.

        --------------------------------------------------------------

        • border_bottom, {string}
          Default: "▀"

          Text to use for the bottom border.

        • border_top, {string}
          Default: "▄"

          Text to use for the top border.

        --------------------------------------------------------------

        • hl, {string}
          Default: "MarkviewCode"

          Default highlight group for the metadata section.

          Warning:
          This will be used by other properties that have `_hl` in their
          name.

        • border_bottom_hl, {string?}
          Default: nil

          Highlight group for the bottom border.

        • border_hl {string?}
          Default: "MarkviewCodeFg"

          Default highlight group for the metadata section.

          Note:
          This will be used by `border_top_hl` & `border_bottom_hl` if their
          values are `nil`.

        • border_top_hl, {string?}
          Default: nil

          Highlight group for the top border.

                                              *markview.nvim-md.metadata_plus*
                                        *markview.nvim-markdown.metadata_plus*
    • metadata_plus, {table}

      Changes how TOML metadata sections are shown. Same as `metadata_minus`.

    • tables, {table}

      Changes how tables look.

        • enable, {boolean}
          Default: true

          Enables/Disables preview of this node.

        --------------------------------------------------------------

        • block_decorator, {boolean}
          Default: true

          When `true`, top & bottom borders are added to the table.

        • use_virt_lines, {boolean}
          Default: true

          When `true`, top & bottom borders are made with virtual lines.

        --------------------------------------------------------------

        • parts, {table}
          Default: { ... }

          Table containing various parts for drawing the table.

          Properties: ~

            • top, {list}
              Default: { ... }

              List of parts to create the top border. These parts are,

                • Top left corner
                • Top border
                • Top right corner
                • Column separator

            • header, {list}
              Default: { ... }

              List of parts to create the header borders. These parts are,

                • Header left
                • Column separator
                • Header right

            • separator, {list}
              Default: { ... }

              List of parts to create the separator between the header & the
              rows. These parts are,

                • Left separator
                • Normal border
                • Right separator
                • Column separator

            • row, {list}
              Default: { ... }

              List of parts to create the row borders. These parts are,

                • Row left
                • Column separator
                • Row right

            • bottom, {list}
              Default: { ... }

              List of parts to create the bottom border. These parts are,

                • Bottom left corner
                • Bottom border
                • Bottom right corner
                • Column separator

            ------------------------------------------------------

            • overlap, {list}
              Default: { ... }

              List of parts to create the bottom border when
              `use_virt_lines = false` and 2 adjacent tables only have a
              single line between them.

                • Bottom left corner
                • Bottom border
                • Bottom right corner
                • Column separator

        --------------------------------------------------------------

        • align_center, {tuple}
          Default: { "╴", "╶" }

          Alignment indicators for center aligned columns. The first item is
          placed on the left side of the column & the second item on the
          right side of the column.

        • align_left, {string}
          Default: "╼"

          Alignment indicator for left aligned columns

        • align_right, {string}
          Default: "╾"

          Alignment indicator for right aligned columns

          Example: ~
          >lua
            parts = {
                top = { "╭", "─", "╮", "┬" },
                header = { "│", "│", "│" },
                separator = { "├", "─", "┤", "┼" },
                row = { "│", "│", "│" },
                bottom = { "╰", "─", "╯", "┴" },

                overlap = { "┝", "━", "┥", "┿" },

                align_left = "╼",
                align_right = "╾",
                align_center = { "╴", "╶" }
            },
<







































vim:ft=help:colorcolumn=78:textwidth=78:ts=4:spell:expandtab:
