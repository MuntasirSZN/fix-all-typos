*markview.nvim-preview*                            Preview options for markview

                 Options that change how previews are shown.
>lua
    -- [ Markview | Preview options ] ---------------------------------------------------------

    --- Preview configuration for `markview.nvim`.
    ---@class config.preview
    ---
    --- Enables *preview* when attaching to new buffers.
    ---@field enable? boolean
    --- Enables `hybrid mode` when attaching to new buffers.
    ---@field enable_hybrid_mode? boolean
    ---
    --- Icon provider.
    ---@field icon_provider?
    ---| "internal" Internal icon provider.
    ---| "devicons" `nvim-web-devicons` as icon provider.
    ---| "mini" `mini.icons` as icon provider.
    ---
    --- Callback functions.
    ---@field callbacks? preview.callbacks
    --- VIM-modes where `hybrid mode` is enabled.
    ---@field hybrid_modes? string[]
    --- Options that should/shouldn't be previewed in `hybrid_modes`.
    ---@field ignore_previews? preview.ignore
    --- Clear lines around the cursor in `hybrid mode`, instead of nodes?
    ---@field linewise_hybrid_mode? boolean
    --- VIM-modes where previews will be shown.
    ---@field modes? string[]
    ---
    --- Debounce delay for updating previews.
    ---@field debounce? integer
    --- Buffer filetypes where the plugin should attach.
    ---@field filetypes? string[]
    --- Buftypes that should be ignored(e.g. nofile).
    ---@field ignore_buftypes? string[]
    --- Maximum number of lines a buffer can have before switching to partial rendering.
    ---@field max_buf_lines? integer
    ---
    --- Lines before & after the cursor that is considered being edited.
    --- Edited content isn't rendered.
    ---@field edit_range? [ integer, integer ]
    --- Lines before & after the cursor that is considered being previewed.
    ---@field draw_range? [ integer, integer ]
    ---
    --- Window options for the `splitview` window.
    --- See `:h nvim.open_win()`.
    ---@field splitview_winopts? table
    preview = {
        ---+${conf}

        enable = true,

        callbacks = {
            ---+${func}

            on_attach = function (_, wins)
                ---+${lua}

                --- Initial state for attached buffers.
                ---@type string
                local attach_state = spec.get({ "preview", "enable" }, { fallback = true, ignore_enable = true });

                if attach_state == false then
                    --- Attached buffers will not have their previews
                    --- enabled.
                    --- So, don't set options.
                    return;
                end

                for _, win in ipairs(wins) do
                    --- Preferred conceal level should
                    --- be 3.
                    vim.wo[win].conceallevel = 3;
                end

                ---_
            end,

            on_detach = function (_, wins)
                ---+${lua}
                for _, win in ipairs(wins) do
                    --- Only set `conceallevel`.
                    --- `concealcursor` will be
                    --- set via `on_hybrid_disable`.
                    vim.wo[win].conceallevel = 0;
                end
                ---_
            end,

            on_enable = function (_, wins)
                ---+${lua}

                for _, win in ipairs(wins) do
                    vim.wo[win].conceallevel = 3;
                end

                ---_
            end,

            on_disable = function (_, wins)
                ---+${lua}
                for _, win in ipairs(wins) do
                    vim.wo[win].conceallevel = 0;
                end
                ---_
            end,

            on_hybrid_enable = function (_, wins)
                ---+${lua}

                ---@type string[]
                local prev_modes = spec.get({ "preview", "modes" }, { fallback = {} });
                ---@type string[]
                local hybd_modes = spec.get({ "preview", "hybrid_modes" }, { fallback = {} });

                local concealcursor = "";

                for _, mode in ipairs(prev_modes) do
                    if vim.list_contains(hybd_modes, mode) == false and vim.list_contains({ "n", "v", "i", "c" }, mode) then
                        concealcursor = concealcursor .. mode;
                    end
                end

                for _, win in ipairs(wins) do
                    vim.wo[win].concealcursor = concealcursor;
                end

                ---_
            end,

            on_hybrid_disable = function (_, wins)
                ---+${lua}

                ---@type string[]
                local prev_modes = spec.get({ "preview", "modes" }, { fallback = {} });
                local concealcursor = "";

                for _, mode in ipairs(prev_modes) do
                    if vim.list_contains({ "n", "v", "i", "c" }, mode) then
                        concealcursor = concealcursor .. mode;
                    end
                end

                for _, win in ipairs(wins) do
                    vim.wo[win].concealcursor = concealcursor;
                end

                ---_
            end,

            on_mode_change = function (_, wins, current_mode)
                ---+${lua}

                ---@type string[]
                local preview_modes = spec.get({ "preview", "modes" }, { fallback = {} });
                ---@type string[]
                local hybrid_modes = spec.get({ "preview", "hybrid_modes" }, { fallback = {} });

                local concealcursor = "";

                for _, mode in ipairs(preview_modes) do
                    if vim.list_contains(hybrid_modes, mode) == false and vim.list_contains({ "n", "v", "i", "c" }, mode) then
                        concealcursor = concealcursor .. mode;
                    end
                end

                for _, win in ipairs(wins) do
                    if vim.list_contains(preview_modes, current_mode) then
                        vim.wo[win].conceallevel = 3;
                        vim.wo[win].concealcursor = concealcursor;
                    else
                        vim.wo[win].conceallevel = 0;
                        vim.wo[win].concealcursor = "";
                    end
                end
                ---_
            end,

            on_splitview_open = function (_, _, win)
                ---+${lua}
                vim.wo[win].conceallevel = 3;
                vim.wo[win].concealcursor = "n";
                ---_
            end
            ---_
        },
        debounce = 150,
        icon_provider = "internal",

        draw_range = { 2 * vim.o.lines, 2 * vim.o.lines },
        edit_range = { 0, 0 },

        modes = { "n", "no", "c" },
        hybrid_modes = {},
        linewise_hybrid_mode = false,
        max_buf_lines = 1000,

        filetypes = { "markdown", "quarto", "rmd", "typst" },
        ignore_buftypes = { "nofile" },
        ignore_previews = {},

        splitview_winopts = {
            split = "right"
        }

        ---_
    };
<

------------------------------------------------------------------------------
📚 Table of contents                               *markview.nvim-preview.toc*

                                                *markview.nvim-preview.enable*
enable ~

    - Type: `boolean`
    - Dynamic: true
    - Default: true

Enables previews. Can be set to `false` in case you want to use keymaps to toggle previews.

                                    *markview.nvim-preview.enable_hybrid_mode*
enable_hybrid_mode ~

    - Type: `boolean`
    - Dynamic: true
    - Default: true

Enables hybrid mode(if `hybrid_modes` is set). Set this to `false` if you want to enable hybrid mode on-demand.

                                         *markview.nvim-preview.icon_provider*
icon_provider ~

    - Type: `"devicons | "internal" | "mini"`
    - Dynamic: true
    - Default: "internal"


▋ 📜 Note:
▋ You will need to install the external icon providers to use them!

Changes the icon provider used for drawing icons. Currently supported providers are,

>lua
    --- Icon provider.
    ---@field icon_provider?
    ---| "internal" Internal icon provider.
    ---| "devicons" `nvim-web-devicons` as icon provider.
    ---| "mini" `mini.icons` as icon provider.
    icon_provider = "internal",
<

Here's a simple comparison,

            ┏━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┓
            ┃ Feature        ┃ `devicons` ┃ `mini`  ┃ `internal` ┃
            ┡━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━┩
            │ Icon supoort   │ many       │ many    │ limited    │
            │ Dynamic colors │ no         │ partial │ yes        │
            │ External       │ yes        │ yes     │ no         │
            └────────────────┴────────────┴─────────┴────────────┘

                                             *markview.nvim-preview.callbacks*
callbacks ~

    - Type: `table`
    - Dynamic: false

Functions to execute when specific tasks are done by the plugin.

▋ 📜 Note:
▋ Callbacks are executed before [autocmds]().

>lua
    -- [ Markview | Preview options > Callbacks ] ---------------------------------------------

    --- Callback functions for specific events.
    ---@class preview.callbacks
    ---
    --- Called when attaching to a buffer.
    ---@field on_attach? fun(buf: integer, wins: integer[]): nil
    --- Called when detaching from a buffer.
    ---@field on_detach? fun(buf: integer, wins: integer[]): nil
    ---
    --- Called when disabling preview of a buffer.
    --- Also called when opening `splitview`.
    ---@field on_disable? fun(buf: integer, wins: integer[]): nil
    --- Called when enabling preview of a buffer.
    --- Also called when disabling `splitview`.
    ---@field on_enable? fun(buf: integer, wins: integer[]): nil
    ---
    --- Called when disabling hybrid mode in a buffer.
    --- > Called after `on_attach` when attaching to a buffer.
    --- > Called after `on_disable`.
    ---@field on_hybrid_disable? fun(buf: integer, wins: integer[]): nil
    --- Called when enabling hybrid mode in a buffer.
    --- > Called after `on_attach`(if `hybrid_mod` is disabled).
    --- > Called after `on_enable`.
    ---@field on_hybrid_enable? fun(buf: integer, wins: integer[]): nil
    ---
    --- Called when changing VIM-modes(only on active buffers).
    ---@field on_mode_change? fun(buf: integer, wins: integer[], mode: string): nil
    ---
    --- Called before closing splitview.
    ---@field on_splitview_close? fun(source: integer, preview_buf: integer, preview_win: integer): nil
    --- Called when opening splitview.
    ---@field on_splitview_open? fun(source: integer, preview_buf: integer, preview_win: integer): nil
    preview_callbacks = {
        ---+${func}

        on_attach = function (_, wins)
            ---+${lua}

            --- Initial state for attached buffers.
            ---@type string
            local attach_state = spec.get({ "preview", "enable" }, { fallback = true, ignore_enable = true });

            if attach_state == false then
                --- Attached buffers will not have their previews
                --- enabled.
                --- So, don't set options.
                return;
            end

            for _, win in ipairs(wins) do
                --- Preferred conceal level should
                --- be 3.
                vim.wo[win].conceallevel = 3;
            end

            ---_
        end,

        on_detach = function (_, wins)
            ---+${lua}
            for _, win in ipairs(wins) do
                --- Only set `conceallevel`.
                --- `concealcursor` will be
                --- set via `on_hybrid_disable`.
                vim.wo[win].conceallevel = 0;
            end
            ---_
        end,

        on_enable = function (_, wins)
            ---+${lua}

            for _, win in ipairs(wins) do
                vim.wo[win].conceallevel = 3;
            end

            ---_
        end,

        on_disable = function (_, wins)
            ---+${lua}
            for _, win in ipairs(wins) do
                vim.wo[win].conceallevel = 0;
            end
            ---_
        end,

        on_hybrid_enable = function (_, wins)
            ---+${lua}

            ---@type string[]
            local prev_modes = spec.get({ "preview", "modes" }, { fallback = {} });
            ---@type string[]
            local hybd_modes = spec.get({ "preview", "hybrid_modes" }, { fallback = {} });

            local concealcursor = "";

            for _, mode in ipairs(prev_modes) do
                if vim.list_contains(hybd_modes, mode) == false and vim.list_contains({ "n", "v", "i", "c" }, mode) then
                    concealcursor = concealcursor .. mode;
                end
            end

            for _, win in ipairs(wins) do
                vim.wo[win].concealcursor = concealcursor;
            end

            ---_
        end,

        on_hybrid_disable = function (_, wins)
            ---+${lua}

            ---@type string[]
            local prev_modes = spec.get({ "preview", "modes" }, { fallback = {} });
            local concealcursor = "";

            for _, mode in ipairs(prev_modes) do
                if vim.list_contains({ "n", "v", "i", "c" }, mode) then
                    concealcursor = concealcursor .. mode;
                end
            end

            for _, win in ipairs(wins) do
                vim.wo[win].concealcursor = concealcursor;
            end

            ---_
        end,

        on_mode_change = function (_, wins, current_mode)
            ---+${lua}

            ---@type string[]
            local preview_modes = spec.get({ "preview", "modes" }, { fallback = {} });
            ---@type string[]
            local hybrid_modes = spec.get({ "preview", "hybrid_modes" }, { fallback = {} });

            local concealcursor = "";

            for _, mode in ipairs(preview_modes) do
                if vim.list_contains(hybrid_modes, mode) == false and vim.list_contains({ "n", "v", "i", "c" }, mode) then
                    concealcursor = concealcursor .. mode;
                end
            end

            for _, win in ipairs(wins) do
                if vim.list_contains(preview_modes, current_mode) then
                    vim.wo[win].conceallevel = 3;
                    vim.wo[win].concealcursor = concealcursor;
                else
                    vim.wo[win].conceallevel = 0;
                    vim.wo[win].concealcursor = "";
                end
            end
            ---_
        end,

        on_splitview_open = function (_, _, win)
            ---+${lua}
            vim.wo[win].conceallevel = 3;
            vim.wo[win].concealcursor = "n";
            ---_
        end
        ---_
    };
<

A short description of what each parameter represents,

    - buf
      Buffer where the callback is being run on.

    - wins
      List of windows that contain `buf`.

    - mode
      VIM mode short-hand(e.g. "n", "i"). Output of
      `vim.api.nvim_get_mode().mode`.

    - source
      Source buffer for splitview.

    - preview_buf
      Buffer containing the preview of splitview.

    - preview_win
      Window containing the preview of splitview.

                                          *markview.nvim-preview.hybrid_modes*
hybrid_modes ~

    - Type: `string[]`
    - Dynamic: true(not recommended)
    - Default: {}

List of VIM-modes where `hybrid mode` is enable. These modes must be present
in the `modes` to take effect!

▋ Hybrid mode is used to preview & edit files at the same time.
▋ When enabled, text within a specified range around the cursor will
▋ not show the preview.

                                       *markview.nvim-preview.ignore_previews*
ignore_previews ~

    - Type `preview.ignore`
    - Dynamic: true(not recommended)

>lua
    -- [ Markview | Preview options > Ignore preview ] ----------------------------------------

    --- Items to ignore when rendering.
    ---@class preview.ignore
    ---
    ---@field html? ignore_html[]
    ---@field latex? ignore_latex[]
    ---@field markdown? ignore_md[]
    ---@field markdown_inline? ignore_inline[]
    ---@field typst? ignore_typst[]
    ---@field yaml? ignore_yaml[]
    preview_ignore = {};

    ---@alias ignore_html
    ---| "!container_elements"
    ---| "!headings"
    ---| "!void_elements"
    ---
    ---| "container_elements"
    ---| "headings"
    ---| "void_elements"

    ---@alias ignore_latex
    ---| "!blocks"
    ---| "!commands"
    ---| "!escapes"
    ---| "!fonts"
    ---| "!inlines"
    ---| "!parenthesis"
    ---| "!subscripts"
    ---| "!superscripts"
    ---| "!symbols"
    ---| "!texts"
    ---
    ---| "blocks"
    ---| "commands"
    ---| "escapes"
    ---| "fonts"
    ---| "inlines"
    ---| "parenthesis"
    ---| "subscripts"
    ---| "superscripts"
    ---| "symbols"
    ---| "texts"

    ---@alias ignore_md
    ---| "!block_quotes"
    ---| "!code_blocks"
    ---| "!headings"
    ---| "!horizontal_rules"
    ---| "!list_items"
    ---| "!metadata_minus"
    ---| "!metadata_plus"
    ---| "!reference_definitions"
    ---| "!tables"
    ---
    ---| "block_quotes"
    ---| "code_blocks"
    ---| "headings"
    ---| "horizontal_rules"
    ---| "list_items"
    ---| "metadata_minus"
    ---| "metadata_plus"
    ---| "reference_definitions"
    ---| "tables"

    ---@alias ignore_inline
    ---| "!block_references"
    ---| "!checkboxes"
    ---| "!emails"
    ---| "!embed_files"
    ---| "!entities"
    ---| "!escapes"
    ---| "!footnotes"
    ---| "!highlights"
    ---| "!hyperlinks"
    ---| "!images"
    ---| "!inline_codes"
    ---| "!internal_links"
    ---| "!uri_autolinks"
    ---
    ---| "block_references"
    ---| "checkboxes"
    ---| "emails"
    ---| "embed_files"
    ---| "entities"
    ---| "escapes"
    ---| "footnotes"
    ---| "highlights"
    ---| "hyperlinks"
    ---| "images"
    ---| "inline_codes"
    ---| "internal_links"
    ---| "uri_autolinks"

    ---@alias ignore_typst
    ---| "!code_blocks"
    ---| "!code_spans"
    ---| "!escapes"
    ---| "!headings"
    ---| "!labels"
    ---| "!list_items"
    ---| "!math_blocks"
    ---| "!math_spans"
    ---| "!raw_blocks"
    ---| "!raw_spans"
    ---| "!reference_links"
    ---| "!subscripts"
    ---| "!superscripts"
    ---| "!symbols"
    ---| "!terms"
    ---| "!url_links"
    ---
    ---| "code_blocks"
    ---| "code_spans"
    ---| "escapes"
    ---| "headings"
    ---| "labels"
    ---| "list_items"
    ---| "math_blocks"
    ---| "math_spans"
    ---| "raw_blocks"
    ---| "raw_spans"
    ---| "reference_links"
    ---| "subscripts"
    ---| "superscripts"
    ---| "symbols"
    ---| "terms"
    ---| "url_links"

    ---@alias ignore_yaml
    ---| "!properties"
    ---
    ---| "properties"
<

Controls which items get affected by `hybrid mode`.

▋ Items that are affected by `hybrid mode` will show the raw version
▋ of them(instead of the preview) when the cursor is inside them.

Each language can have a list of `option names`.

    - `html`,
        + container_elements
        + headings
        + void_elements

    - `latex`,
        + blocks
        + commands
        + escapes
        + fonts
        + inlines
        + parenthesis
        + subscripts
        + superscripts
        + symbols
        + texts

    - `markdown`,
        + block_quotes
        + code_blocks
        + headings
        + horizontal_rules
        + list_items
        + metadata_minus
        + metadata_plus
        + reference_definitions
        + tables

        + checkboxes(for `[ ]` & `[X]`)

    - `markdown_inline`
        + block_references
        + checkboxes
        + emails
        + embed_files
        + entities
        + escapes
        + footnotes
        + highlights
        + hyperlinks
        + images
        + inline_codes
        + internal_links
        + uri_autolinks

    - `typst`
        + code_blocks
        + code_spans
        + escapes
        + headings
        + labels
        + list_items
        + math_blocks
        + math_spans
        + raw_blocks
        + raw_spans
        + reference_links
        + subscripts
        + superscripts
        + symbols
        + terms
        + url_links

    - `yaml`
        + properties

▋ 💡 Tip:
▋ You can add a `!` before the option name to make it affect everything
▋ other than the given option name. >lua
    -- Affects everything other than "block quotes".
    markdown = { "!block_quotes" }
<

                                  *markview.nvim-preview.linewise_hybrid_mode*
linewise_hybrid_mode ~

    - Type: `boolean`
    - Dynamic: false
    - Default: false

Enables linewise hybrid mode.

                                                 *markview.nvim-preview.modes*
modes ~

    - Type: `string[]`
    - Dynamic: true(not recommended)
    - Default: { "n", "no", "c" }

List of VIM-modes where previews are shown.

                                              *markview.nvim-preview.debounce*
debounce ~

    - Type: `integer`
    - Dynamic: true(not recommended)
    - Default: 50

Debounce delay(in `milliseconds`) for rendering. Affects how frequently the
preview is updated.

                                             *markview.nvim-preview.filetypes*
filetypes ~

    - Type: `string[]`
    - Dynamic: true(not recommended)
    - Default: { "markdown", "rmd", "quarto", "typst" }

List of buffer filetypes to enable this plugin in. This will cause the plugin
to attach to new buffers who have any of these filetypes.

                                       *markview.nvim-preview.ignore_buftypes*
ignore_buftypes ~

    - Type: `string[]`
    - Dynamic: true(not recommended)
    - Default: { "nofile" }

List of buffer types to ignore when attaching to new buffers. Checked after
the filetype.

                                         *markview.nvim-preview.max_buf_lines*
max_buf_lines ~

    - Type: `integer`
    - Dynamic: true(not recommended)
    - Default: 1000

Maximum number of lines a buffer can have before the plugin switches to
partial-rendering.

▋ 📜 Note:
▋ When partial-rendering is used, only part of the buffer will have preview.
▋ This may be distracting when moving long distances in the buffer. 

                                            *markview.nvim-preview.edit_range*
edit_range ~

    - Type: `[ integer, integer ]`
    - Dynamic: true
    - Default: { 0, 0 }

Number of lines above & below the cursor that will be affected by
`hybrid mode`.

This changes 2 behaviors,

    1. When `linewise_hybrid_mode = true`, this changes the lines that will
      not be rendered.

    2. When `linewise_hybrid_mode` isn't being used, this affects which nodes
      aren't rendered.

                                            *markview.nvim-preview.draw_range*
draw_range ~

    - Type: `[ integer, integer ]`
    - Dynamic: true
    - Default: { vim.o.columns, vim.o.columns }

Number of lines above & below the cursor to render.

                                     *markview.nvim-preview.splitview_winopts*
splitview_winopts ~

    - Type: `table`
    - Dynamic: true(not recommended)
    - Default: { split = "right" }

Window options(see `:h vim.api.nvim_open_win()`) for the splitview window.

------------------------------------------------------------------------------
vim:ft=help:tw=78:
